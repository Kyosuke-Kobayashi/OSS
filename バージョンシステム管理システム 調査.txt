集中バージョン管理システム
[CVS]
CVSとは、著名なオープンソースのバージョン管理システム（VCS）の一つで、ネットワークを通じて複数人で利用するクライアントサーバ型のVCSとして初めて本格的に普及したもの。
一方、（同一ファイルであることを維持したまま）ファイル名やディレクトリ名を変更することができない、ASCII文字以外のファイル名などを正しく扱えない、リポジトリの分散に対応しない、バイナリファイルの差分を抽出できずすべての版を丸ごと保存してしまう（保管容量が増大する）などの難点がよく指摘される

[Subversion]
CVS（Concurrent Versions System）を参考に開発され、基本的なコマンドなどはCVSと共通になっている。
CVSではできなかったファイル名の変更やディレクトリの移動・削除などが可能になっている。最新版のファイルを手元にキャッシュとして保存するため、無駄な通信が省かれ高速に同期することができる。sshを標準でサポートしており、インターネット上でも安全にファイルのやりとりができる。

[Perforce]
Perforce は、商用のプロプライエタリなバージョン管理システムである。Christopher Seiwaldが1995年に創設した Perforce Software, Inc. が開発した。
・長所
高速である。特にsync操作が高速である。
分岐と統合はCVSやSubversionよりも柔軟だが、システム構成の異なるGitやBitKeeperほどではない。
インストールやサーバの運用が単純。
大規模構成が可能である。2016年には935TBのリポジトリを使った運用事例が報告されている。
・短所
データは暗号化されない。サードパーティー製品（SSH tunnelやVPN）を使えば暗号化可能。
高価である。ユーザー毎のライセンスとなっている。



分散バージョン管理システム
[git]
Gitは分散バージョン管理システムに分類され、管理するデータの集合体であるリポジトリ（repository）を、各利用者の手元のコンピュータに丸ごと複製し、必要に応じて中央の管理サーバと同期する方式を取っている。

開発者はデータの取り出しや保存を手元のローカルリポジトリに対して行い、任意のタイミングでこれを中央のリモートリポジトリに反映（「プッシュ」という）させる手順を取る。これにより、常にサーバと通信可能でなくても編集が可能となり、検索や参照なども高速に行なうことができる。

[Mercurial]
マージを戻すことが難しい
Mercurialにはマージを戻すための操作コマンドがデフォルトで存在しないため、コミットをローカルで戻すための拡張コマンドが必要
Mercurialは複雑で高機能のGitとは違い、単純なコマンドしか使わない。
また、MercurialとGitの実行コマンド「pull」は使い勝手に違いがあり,
Gitはローカルに反映するまでのすべてを実行してくれるのに対し、Mercurialはリポジトリの情報を引き寄せるだけ
実行するコマンドは、clone・up-C・commit・merge・diff・branch・pull・pushのみ

[Bazaar]
Bazaarはほかのツールに比べ最も後発であることと、使い勝手に定評のあるUbuntuの開発で利用されていることもあり、洗練された印象があります。特徴としてプラグインアーキテクチャを採用しており、EclipseやTracのようにプラグインをアドオンすることにより機能拡張ができます。例えば、BazaarでSVNのリポジトリを扱えるようにする機能は「svnプラグイン」として実装されています。同様にMercurialやCVSなどのプラグインを作成すれば、ほかのバージョン管理ツールと容易に連携できます。
